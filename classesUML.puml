@startuml

class App
class Controller
class StackFactory
class InfixTranslator

class Calculator
interface ICalculator


class StackedArrayList
class StackedVector
class StackedLinkedList
class StackedDoubleLinkedList
class StackedVector
interface Stack<E> <<interface>>
abstract class ListStack

class DoubleLinkList


App <-- Controller
Controller *-- StackFactory
Controller *-- Calculator
Controller *-- InfixTranslator

Calculator ..|> ICalculator

Stack <|.. "implements" ListStack
StackFactory *-- Stack
ListStack <-- "inherits" StackedArrayList
ListStack <-- "inherits" StackedVector
ListStack <-- "inherits" StackedLinkedList
ListStack <-- "inherits" StackedDoubleLinkedList

StackedDoubleLinkedList *-- DoubleLinkList

class App {
    + main(String[] args)
}

class StackFactory {
    + getCalculator()
}

class Controller {
    calculator: Calculator
}

class Calculator{
    - stack: Stack<Double>
    + getPrevious(): double
    + evaluate(String): double
}

interface ICalculator <<interface>>{
    evaluate(String): double
    getPrevious(): double
}

interface Stack {
    push(E): void
    peek(): E
    pop(): E
    empty(): boolean
    size(): int
}

class ListStack{
    - data : List<E>
    + push(E): void
    + peek(): E
    + pop(): E
    + empty(): boolean
    + size(): int
    + clear(): void
}

class StackedArrayList{
    - data : ArrayList<E>
}
class StackedVector{
    - data : Vector<E>
}
class StackedLinkedList{
    - data : LinkedList<E>
}
class StackedDoubleLinkedList{
    - data : DoubleLinkList<E>
}

@enduml