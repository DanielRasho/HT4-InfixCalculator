@startuml

class App
class Controller
class StackFactory
class InfixTranslator

class Calculator
interface ICalculator


class StackedArrayList
class StackedVector
class StackedLinkedList
class StackedDoubleLinkedList
class StackedVector
interface Stack<E> <<interface>>
abstract class ListStack

class DoubleLinkList


App <-- Controller
Controller *-- StackFactory
Controller *-- Calculator
Controller *-- InfixTranslator

Calculator ..|> ICalculator

Stack <|.. "implements" ListStack
StackFactory *-- Stack
ListStack <-- "inherits" StackedArrayList
ListStack <-- "inherits" StackedVector
ListStack <-- "inherits" StackedLinkedList
ListStack <-- "inherits" StackedDoubleLinkedList

StackedDoubleLinkedList *-- Nodo

class App {
    + main(String[] args)
}

class StackFactory {
    + getStack() : Stack<Double>
}

class InfixTranslator{
    + InfixToPostFix(String)
}

class Controller {
    - operationFile : File
    + getInstance() : Controller
    + start()
    - fileToList(String, String): ArrayList<String>
}

class Calculator{
    - stack: Stack<Double>
    + Calculator() : Stack<Double>
    + getPrevious(): double
    + evaluate(String): double
    - operatorsAsArray(String) : String[]
}

interface ICalculator <<interface>>{
    evaluate(String): double
    getPrevious(): double
}

interface Stack {
    push(E): void
    peek(): E
    pop(): E
    empty(): boolean
    size(): int
    clear(): void
}

class ListStack{
    - data : List<E>
    + push(E): void
    + peek(): E
    + pop(): E
    + empty(): boolean
    + size(): int
    + clear(): void
}

class StackedArrayList{
    - data : ArrayList<E>
}
class StackedVector{
    - data : Vector<E>
}
class StackedLinkedList{
    - data : LinkedList<E>
}

class StackedDoubleLinkedList <E>{
    + size() : int
    + pop() : E
    + add (E)
}

class Nodo{
    - E data;
    - siguiente;
    - anterior;
    + Nodo(e data)
    + setDato(e data): void
    + getDato(): E
    + setAnterior(Nodo<E> anterior): Nodo<E>
    + getAnterior(): Nodo<E>
    + setSiguiente(Nodo<E> siguiente): Nodo<E>
    + getSiguiente(): Nodo<E>
}

@enduml